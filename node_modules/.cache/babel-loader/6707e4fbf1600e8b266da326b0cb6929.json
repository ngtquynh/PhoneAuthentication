{"ast":null,"code":"var _jsxFileName = \"/Users/tdnguyen21/my-app/src/App.js\";\n// import React, { Component } from 'react';\n// import './index.css';\n// import validate from './validate';\n// import PhoneNumber from './PhoneNumber';\n// import AccessCode from './AccessCode';\n// class App extends Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       formIsValid: false,\n//       formControls: {\n//         phone_number: {\n//           value: '',\n//           placeholder: 'Phone number',\n//           valid: false,\n//           validationRules: {\n//             minLength: 10,\n//             isRequired: true\n//           },\n//           touched: false\n//         },\n//         access_code: {\n//           value: '',\n//           placeholder: 'Access Code',\n//           valid: false,\n//           validationRules: {\n//             isRequired: true,\n//             minLength: 6,\n//           },\n//           touched: false\n//         },\n//       }\n//     }\n//   }\n//   changeHandler = event => {\n//       const name = event.target.name;\n//       const value = event.target.value;\n//       const updatedControls = {\n//         ...this.state.formControls\n//       };\n//       const updatedFormElement = {\n//         ...updatedControls[name]\n//       };\n//       updatedFormElement.value = value;\n//       updatedFormElement.touched = true;\n//       updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n//       updatedControls[name] = updatedFormElement;\n//       let formIsValid = true;\n//       for (let inputIdentifier in updatedControls) {\n//         formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n//       }\n//       this.setState({\n//         formControls: updatedControls,\n//         formIsValid: formIsValid\n//       });\n//   }\n//   formSubmitHandler = () => {\n// \tconst formData = {};\n// \tfor (let formElementId in this.state.formControls) {\n// \t    formData[formElementId] = this.state.formControls[formElementId].value;\n// \t}\n//     \tconsole.dir(formData);\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//           <PhoneNumber name=\"PhoneNumber\" \n//                      placeholder={this.state.formControls.phone_number.placeholder}\n//                      value={this.state.formControls.phone_number.value}\n//                      onChange={this.changeHandler}\n//                      touched={this.state.formControls.phone_number.touched}\n//                      valid={this.state.formControls.phone_number.valid}\n//           />\n//           <AccessCode name=\"access_code\"\n//                   placeholder={this.state.formControls.access_code.placeholder}\n//                   value={this.state.formControls.access_code.value}\n//                   onChange={this.changeHandler}\n//                   touched={this.state.formControls.access_code.touched}\n//                   valid={this.state.formControls.access_code.valid}\n//           />\n//           <button onClick={this.formSubmitHandler} \n//                   disabled={! this.state.formIsValid}\n//             > \n//               Submit\n//           </button>\n//       </div>\n//     );\n//   }\n// }\n// export default App;\nimport React, { Component } from 'react';\nimport './App.css';\nimport TextInput from './TextInput';\nimport validate from './validate';\nimport TextArea from './TextArea';\nimport Email from './Email';\nimport Select from './Select';\nimport Radio from './Radio';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.changeHandler = event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      const updatedControls = { ...this.state.formControls\n      };\n      const updatedFormElement = { ...updatedControls[name]\n      };\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedControls) {\n        formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.formSubmitHandler = () => {\n      const formData = {};\n\n      for (let formElementId in this.state.formControls) {\n        formData[formElementId] = this.state.formControls[formElementId].value;\n      }\n\n      console.dir(formData);\n    };\n\n    this.state = {\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: 'What is your name',\n          valid: false,\n          validationRules: {\n            minLength: 4,\n            isRequired: true\n          },\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'What is your address',\n          valid: false,\n          validationRules: {\n            minLength: 4,\n            isRequired: true\n          },\n          touched: false\n        },\n        access_code: {\n          value: '',\n          placeholder: 'What is your email',\n          valid: false,\n          validationRules: {\n            isRequired: true,\n            isEmail: true\n          },\n          touched: false\n        },\n        gender: {\n          value: '',\n          placeholder: 'What is your gender',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true\n          },\n          options: [{\n            value: 'male',\n            displayValue: 'Male'\n          }, {\n            value: 'female',\n            displayValue: 'Female'\n          }]\n        },\n        my_radio: {\n          value: '',\n          placeholder: 'Are you a frontend developer',\n          valid: false,\n          touched: false,\n          validationRules: {// isRequired: true,\n          },\n          options: [{\n            value: 0,\n            displayValue: 'No'\n          }, {\n            value: 1,\n            displayValue: 'Yes'\n          }]\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"name\",\n        placeholder: this.state.formControls.name.placeholder,\n        value: this.state.formControls.name.value,\n        onChange: this.changeHandler,\n        touched: this.state.formControls.name.touched,\n        valid: this.state.formControls.name.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n        name: \"address\",\n        placeholder: this.state.formControls.address.placeholder,\n        value: this.state.formControls.address.value,\n        onChange: this.changeHandler,\n        touched: this.state.formControls.address.touched,\n        valid: this.state.formControls.address.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Email, {\n        name: \"access_code\",\n        placeholder: this.state.formControls.access_code.placeholder,\n        value: this.state.formControls.access_code.value,\n        onChange: this.changeHandler,\n        touched: this.state.formControls.access_code.touched,\n        valid: this.state.formControls.access_code.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"gender\",\n        value: this.state.formControls.gender.value,\n        onChange: this.changeHandler,\n        options: this.state.formControls.gender.options,\n        touched: this.state.formControls.gender.touched,\n        valid: this.state.formControls.gender.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Radio, {\n        name: \"my_radio\",\n        value: this.state.formControls.my_radio.value,\n        onChange: this.changeHandler,\n        options: this.state.formControls.my_radio.options,\n        touched: this.state.formControls.my_radio.touched,\n        valid: this.state.formControls.my_radio.valid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.formSubmitHandler,\n        disabled: !this.state.formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tdnguyen21/my-app/src/App.js"],"names":["React","Component","TextInput","validate","TextArea","Email","Select","Radio","App","constructor","changeHandler","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","inputIdentifier","setState","formSubmitHandler","formData","formElementId","console","dir","placeholder","minLength","isRequired","address","access_code","isEmail","gender","options","displayValue","my_radio","render"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react';\n// import './index.css';\n\n// import validate from './validate';\n// import PhoneNumber from './PhoneNumber';\n// import AccessCode from './AccessCode';\n\n// class App extends Component {\n  \n\n//   constructor() {\n//     super();\n\n//     this.state = {\n//       formIsValid: false,\n//       formControls: {\n        \n//         phone_number: {\n//           value: '',\n//           placeholder: 'Phone number',\n//           valid: false,\n//           validationRules: {\n//             minLength: 10,\n//             isRequired: true\n//           },\n//           touched: false\n//         },\n//         access_code: {\n//           value: '',\n//           placeholder: 'Access Code',\n//           valid: false,\n//           validationRules: {\n//             isRequired: true,\n//             minLength: 6,\n//           },\n//           touched: false\n//         },\n//       }\n\n//     }\n//   }\n\n\n//   changeHandler = event => {\n    \n//       const name = event.target.name;\n//       const value = event.target.value;\n\n//       const updatedControls = {\n//         ...this.state.formControls\n//       };\n//       const updatedFormElement = {\n//         ...updatedControls[name]\n//       };\n//       updatedFormElement.value = value;\n//       updatedFormElement.touched = true;\n//       updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n\n//       updatedControls[name] = updatedFormElement;\n\n//       let formIsValid = true;\n//       for (let inputIdentifier in updatedControls) {\n//         formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n//       }\n\n//       this.setState({\n//         formControls: updatedControls,\n//         formIsValid: formIsValid\n//       });\n\n//   }\n  \n  \n//   formSubmitHandler = () => {\n// \tconst formData = {};\n// \tfor (let formElementId in this.state.formControls) {\n// \t    formData[formElementId] = this.state.formControls[formElementId].value;\n// \t}\n    \n//     \tconsole.dir(formData);\n//   }\n  \n\n//   render() {\n    \n//     return (\n//       <div className=\"App\">\n//           <PhoneNumber name=\"PhoneNumber\" \n//                      placeholder={this.state.formControls.phone_number.placeholder}\n//                      value={this.state.formControls.phone_number.value}\n//                      onChange={this.changeHandler}\n//                      touched={this.state.formControls.phone_number.touched}\n//                      valid={this.state.formControls.phone_number.valid}\n//           />\n\n//           <AccessCode name=\"access_code\"\n//                   placeholder={this.state.formControls.access_code.placeholder}\n//                   value={this.state.formControls.access_code.value}\n//                   onChange={this.changeHandler}\n//                   touched={this.state.formControls.access_code.touched}\n//                   valid={this.state.formControls.access_code.valid}\n//           />\n\n//           <button onClick={this.formSubmitHandler} \n//                   disabled={! this.state.formIsValid}\n//             > \n//               Submit\n//           </button>\n//       </div>\n//     );\n\n//   }\n// }\n\n// export default App;\n\nimport React, { Component } from 'react';\nimport './App.css';\n\nimport TextInput from './TextInput';\nimport validate from './validate';\nimport TextArea from './TextArea';\nimport Email from './Email';\nimport Select from './Select';\nimport Radio from './Radio';\n\nclass App extends Component {\n  \n\n  constructor() {\n    super();\n\n    this.state = {\n      formIsValid: false,\n      formControls: {\n        \n        name: {\n          value: '',\n          placeholder: 'What is your name',\n          valid: false,\n          validationRules: {\n            minLength: 4,\n            isRequired: true\n          },\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'What is your address',\n          valid: false,\n          validationRules: {\n            minLength: 4,\n            isRequired: true\n          },\n          touched: false\n        },\n        access_code: {\n          value: '',\n          placeholder: 'What is your email',\n          valid: false,\n          validationRules: {\n            isRequired: true,\n            isEmail: true\n          },\n          touched: false\n        },\n        gender: {\n          value: '',\n          placeholder: 'What is your gender',\n          valid: false,\n          touched: false,\n          validationRules: {\n            isRequired: true,\n          },\n          options: [\n            { value: 'male', displayValue: 'Male' },\n            { value: 'female', displayValue: 'Female'}\n          ]\n        },\n        my_radio: {\n          value: '',\n          placeholder: 'Are you a frontend developer',\n          valid: false,\n          touched: false,\n          validationRules: {\n            // isRequired: true,\n          },\n          options: [\n            { value: 0, displayValue: 'No' },\n            { value: 1, displayValue: 'Yes' }\n          ]\n        }\n        \n      }\n\n    }\n  }\n\n\n  changeHandler = event => {\n    \n      const name = event.target.name;\n      const value = event.target.value;\n\n      const updatedControls = {\n        ...this.state.formControls\n      };\n      const updatedFormElement = {\n        ...updatedControls[name]\n      };\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n\n      updatedControls[name] = updatedFormElement;\n\n      let formIsValid = true;\n      for (let inputIdentifier in updatedControls) {\n        formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n\n  }\n  \n  \n  formSubmitHandler = () => {\n\tconst formData = {};\n\tfor (let formElementId in this.state.formControls) {\n\t    formData[formElementId] = this.state.formControls[formElementId].value;\n\t}\n    \n    \tconsole.dir(formData);\n  }\n  \n\n  render() {\n    \n    return (\n      <div className=\"App\">\n          <TextInput name=\"name\" \n                     placeholder={this.state.formControls.name.placeholder}\n                     value={this.state.formControls.name.value}\n                     onChange={this.changeHandler}\n                     touched={this.state.formControls.name.touched}\n                     valid={this.state.formControls.name.valid}\n          />\n\n          <TextArea name=\"address\"\n                    placeholder={this.state.formControls.address.placeholder}\n                    value={this.state.formControls.address.value}\n                    onChange={this.changeHandler}\n                    touched={this.state.formControls.address.touched}\n                    valid={this.state.formControls.address.valid}\n          />\n\n          <Email name=\"access_code\"\n                  placeholder={this.state.formControls.access_code.placeholder}\n                  value={this.state.formControls.access_code.value}\n                  onChange={this.changeHandler}\n                  touched={this.state.formControls.access_code.touched}\n                  valid={this.state.formControls.access_code.valid}\n          />\n\n          <Select name=\"gender\"\n                  value={this.state.formControls.gender.value}\n                  onChange={this.changeHandler}\n                  options={this.state.formControls.gender.options}\n                  touched={this.state.formControls.gender.touched}\n                  valid={this.state.formControls.gender.valid}\n          />\n\n          <Radio name=\"my_radio\"\n            value={this.state.formControls.my_radio.value}\n            onChange={this.changeHandler}\n            options={this.state.formControls.my_radio.options}\n            touched={this.state.formControls.my_radio.touched}\n            valid={this.state.formControls.my_radio.valid}\n          />\n\n          <button onClick={this.formSubmitHandler} \n                  disabled={! this.state.formIsValid}\n            > \n              Submit\n          </button>\n      </div>\n    );\n\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}