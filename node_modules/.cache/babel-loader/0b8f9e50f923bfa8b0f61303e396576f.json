{"ast":null,"code":"const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case 'minLength':\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case 'isRequired':\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case 'isEmail':\n        isValid = isValid && emailValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n/**\n * minLength Val\n * @param  value \n * @param  maxLength\n * @return          \n */\n\n\nconst minLengthValidator = (value, maxLength) => {\n  return value.length <= maxLength;\n};\n/**\n * Check to confirm that feild is required\n * \n * @param  value \n * @return       \n */\n\n\nconst requiredValidator = value => {\n  return value.trim() !== '';\n};\n/**\n * Email validation\n * \n * @param value\n * @return \n */\n\n\nconst emailValidator = value => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(value).toLowerCase());\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/tdnguyen21/my-app/src/validate.js"],"names":["validate","value","rules","isValid","rule","minLengthValidator","requiredValidator","emailValidator","maxLength","length","trim","re","test","String","toLowerCase"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AAEtB,YAAQE,IAAR;AACG,WAAK,WAAL;AAAkBD,QAAAA,OAAO,GAAGA,OAAO,IAAIE,kBAAkB,CAACJ,KAAD,EAAQC,KAAK,CAACE,IAAD,CAAb,CAAvC;AAA6D;;AAE9E,WAAK,YAAL;AAAmBD,QAAAA,OAAO,GAAGA,OAAO,IAAIG,iBAAiB,CAACL,KAAD,CAAtC;AAA+C;;AAElE,WAAK,SAAL;AAAgBE,QAAAA,OAAO,GAAGA,OAAO,IAAII,cAAc,CAACN,KAAD,CAAnC;AAA4C;;AAE7D;AAASE,QAAAA,OAAO,GAAG,IAAV;AAPZ;AAUD;;AAED,SAAOA,OAAP;AACD,CAlBD;AAqBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAG,CAACJ,KAAD,EAAQO,SAAR,KAAsB;AAC7C,SAAOP,KAAK,CAACQ,MAAN,IAAgBD,SAAvB;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,iBAAiB,GAAGL,KAAK,IAAI;AAC/B,SAAOA,KAAK,CAACS,IAAN,OAAiB,EAAxB;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMH,cAAc,GAAGN,KAAK,IAAI;AAC5B,MAAIU,EAAE,GAAG,yJAAT;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACZ,KAAD,CAAN,CAAca,WAAd,EAAR,CAAP;AACH,CAHD;;AAOA,eAAed,QAAf","sourcesContent":["const validate = (value, rules) => {\n  let isValid = true;\n  \n  for (let rule in rules) {\n  \n    switch (rule) {\n      \tcase 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]); break;\n        \n        case 'isRequired': isValid = isValid && requiredValidator(value); break;\n\t\t    \n        case 'isEmail': isValid = isValid && emailValidator(value); break;\n        \n      \tdefault: isValid = true;\n    }\n\n  }\n  \n  return isValid;\n}\n\n\n/**\n * minLength Val\n * @param  value \n * @param  maxLength\n * @return          \n */\nconst minLengthValidator = (value, maxLength) => {\n    return value.length <= maxLength;\n}\n\n/**\n * Check to confirm that feild is required\n * \n * @param  value \n * @return       \n */\nconst requiredValidator = value => {\n    return value.trim() !== '';\t\n}\n\n/**\n * Email validation\n * \n * @param value\n * @return \n */\nconst emailValidator = value => {\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(value).toLowerCase());\n}\n\n\n\nexport default validate;"]},"metadata":{},"sourceType":"module"}